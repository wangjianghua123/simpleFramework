<?php!defined('IN_UC') && exit('Access Denied');define('PHONE_EMAIL', 1);class foreuser extends base {    protected $uc_offcn_user;    function __construct() {        parent::__construct();        $this->uc_offcn_user = $_COOKIE['uc_offcn_wx_auth'];    }    //注册页面    function actionregister() {        if ($this->session('uc_offcn_uid') || $_COOKIE['uc_offcn_uid']) {            $this->redirect($this->url('index', '', 'user'));        }        $this->basevar['title'] = "用户注册-快就业";        $login_url = (strpos($_SERVER["HTTP_REFERER"], "jobsdetail") == false) ? $this->url('index', '', 'home') : $_SERVER["HTTP_REFERER"]; //如果是职位详情页，注册后跳转到职位详情，其他页面则跳转至首页        $this->setsessioncode('histroyurl', $login_url);        $this->render('register', array('login_url' => $login_url));    }    //注册操作    function actiondoregister() {        $request = new grequest();        $username = $request->getParam('username') ? htmlspecialchars(trim($request->getParam('username'))) : '';        $password = $request->getParam('password') ? htmlspecialchars(trim($request->getParam('password'))) : '';        $verify = $request->getParam('verify') ? htmlspecialchars(trim($request->getParam('verify'))) : '';        $usertype = $request->getParam('type') ? (int) $request->getParam('type') : 1;        $login_url = $this->sessioncode('histroyurl');        $seg = $reg = array();        if ($this->checkemail($username)) {            if ($verify != (int) $this->getauthcode()) {                ShowMsg("验证码错误或者过期", "-1");                exit();            }            $seg['email'] = $reg['email'] = $username;            $slef_email = $this->actionisemail($seg['email']);            if ($slef_email['recode'] != 2) {                ShowMsg($slef_email['mag'], "-1");                exit();            }        } else {            if (PHONE_EMAIL) {                if ($this->sessionphone('yzphone') != $username) {                    ShowMsg("手机号和获取验证的手机不一致！", "-1");                    exit();                }                if ($this->sessionphone('captcha') != base64_encode($verify)) {                    ShowMsg("验证码错误", "-1");                    exit();                }            } else {                if ($verify != (int) $this->getauthcode()) {                    ShowMsg("验证码错误或者过期", "-1");                    exit();                }            }            $seg['phone'] = $reg['phone'] = $username;            $reg['phone_validate'] = 1;            $slef_phone = $this->actionisphone($seg['phone']);            if ($slef_phone['recode'] != 2) {                ShowMsg($slef_phone['mag'], "-1");                exit();            }        }        $seg['salt'] = $reg['salt'] = $salt = substr(uniqid(rand()), -6);        $seg['password'] = $reg['password'] = md5(md5($password) . $salt);        $seg['times'] = $reg['regdate'] = time();        $seg['ip'] = $reg['regip'] = get_client_ip();        $seg['identity'] = $reg['identity'] = $usertype;        $fu = $this->load("foreuser");        $last = $fu->insert($reg);        if (!$last) {            ShowMsg("注册失败2", "-1");            exit();        } else {            $this->delsessionphone('captcha'); //删除redis中验证码            //判断是否是邮箱  如果是  发送验证邮件            if ($reg['email']) {                $value_key = substr(sha1(uniqid(mt_rand(), true)), 0, 50);                $path = $this->url('registerverification', array('email' => $reg['email'], 'value_key' => $value_key), 'foreuser');                $strti = array(                    'email' => $reg['email'],                    'valuekey' => $value_key,                    'times' => time(),                    'oldemail' => $usertype,                    'istype' => 1 //1验证邮箱2修改邮箱                );                $fu->addvaluekey($strti);                //判断来源网站 默认快就业 现添加优聘                $referer = $_SERVER['HTTP_REFERER'];                if (strpos($referer, "pin.ujiuye.com")) {                    $path = 'http://pin.ujiuye.com/foreuser/registerverification/email/' . $reg['email'] . '/value_key/' . $value_key;                    $issend = $this->sendemail_ujiuye($usertype, 1, $reg['email'], $path);                } else {                    $issend = $this->sendemail($usertype, 1, $reg['email'], $path);                }                if (!$issend) {                    ShowMsg("邮件发送失败", "-1");                    exit();                }                //加载邮箱注册提示页面                $this->redirect($this->url('yzemail', array('email' => $reg['email'], 'type' => $usertype), 'foreuser'));                exit();            }            //获取用户信息            $a = $fu->getRow($last);            //判断用户信息，使用户登陆            if ($a['uid']) {                //获取用户与公司关系                $company = $this->load('company');                $service = $company->getusertocompany($a['uid']);                $company_id = $service['company_id'] ? $service['company_id'] : 0;                $this->setsession('uc_offcn_uid', $a['uid']);                $name = $a['nickname'] ? $a['nickname'] : ($a['phone'] ? substr_replace($a['phone'], "*****", 3, 5) : substr_replace($a['email'], "*****", 3, 5));                $this->setsession('uc_offcn_username', $name);                $this->setsession('uc_offcn_phone', $a['phone']);                $this->setsession('uc_company_id', $company_id);                $this->setsession('uc_usertype', $a['identity']);                $this->setcookie('uc_offcn_uid', $a['uid'], 3600 * 24);                $this->setcookie('uc_offcn_username', $name, 3600 * 24);                $this->setcookie('uc_offcn_phone', $a['phone'], 3600 * 24);                $this->setcookie('uc_company_id', $company_id, 3600 * 24);                $this->setcookie('uc_usertype', $a['identity'], 3600 * 24);                $data = array("uid" => $a['uid'], 'nickname' => $a['nickname'], 'phone' => $a['phone']);                $userinfo['lastloginip'] = get_client_ip();                $userinfo['lastlogintime'] = time();                $fu->edit($userinfo, $a['uid']);                $data_str = str_replace('+', '%2B', uc_authcode(json_encode($data), "ENCODE"));            }            if ($usertype == 2) {                $login_url = $this->url('writeusertocompany', '', 'userforcompany');            }            $this->render('doregister', array('msg' => '恭喜你注册成功！', 'litime' => 3, 'gourl' => $login_url, 'data' => $data_str));        }    }    //注册邮件验证页面    function actionyzemail() {        $request = new grequest();        $emails = $request->getParam('email') ? htmlspecialchars(trim($request->getParam('email'))) : '';        $usertype = $request->getParam('type') ? (int) $request->getParam('type') : 1;        if (!$this->checkemail($emails)) {            ShowMsg("邮箱格式错误，请重新注册！", "-1");            exit;        }        $fu = $this->load("foreuser");        $where['email'] = $emails;        $info = $fu->getUserInfo($where);        if ($info['total']) {            $this->render('yzemail', array('msg' => '验证邮件，完成注册！', 'email' => $emails, 'type' => $usertype));        } else {            ShowMsg("账号信息不存在，请重新注册！", "-1");            exit;        }    }    //邮箱注册邮件验证    function actionregisterverification() {        $request = new grequest();        if ($request->getParam('value_key')) {            $fu = $this->load("foreuser");            $site = array(                'email' => htmlspecialchars(trim($request->getParam('email'))),                'value_key' => htmlspecialchars(trim($request->getParam('value_key')))            );            $value = $fu->getValue($site);            $time = time();            if (empty($value)) {                ShowMsg("验证邮件已过期!!", $this->url('yzemail', array('email' => $site['email']), 'foreuser'));                exit();            }            if ($time - $value['times'] > 86400) {                ShowMsg("验证邮件已过期!", $this->url('yzemail', array('email' => $site['email']), 'foreuser'));                exit();            }            //验证通过    获取用户信息            $userinfo = $fu->getEmail($site['email']);            if ($userinfo) {                //修改用户邮箱验证状态                $fu->edit(array('is_verify' => 1), $userinfo['uid']);                //$fu->delValue($value['id']);                $this->setsession('uc_offcn_uid', $userinfo['uid']);                $this->setsession('uc_offcn_username', substr_replace($userinfo['email'], "*****", 3, 5));                $this->setsession('uc_offcn_phone', '');                $this->setcookie('uc_offcn_uid', $userinfo['uid']);                $this->setcookie('uc_offcn_username', substr_replace($userinfo['email'], "*****", 3, 5));                $this->setcookie('uc_offcn_phone', '');                $this->setsession('uc_usertype', $userinfo['identity']);                if ((int) $value['oldemail'] == 2) {                    ShowMsg("验证成功!", $this->url('writeusertocompany', '', 'userforcompany'));                } else {                    $gourl = ($this->sessioncode("historyurl")) ? $this->sessioncode("historyurl") : $this->url('index', '', 'user');                    ShowMsg("验证成功!", $gourl);                }            } else {                ShowMsg("未找到对应的用户信息，请重新注册!", $this->url('register', '', 'foreuser'));                exit();            }        }    }    //邮箱注册   验证邮件重新发送    function actionagainyzemail() {        $request = new grequest();        $username = $request->getParam('email') ? htmlspecialchars(trim($request->getParam('email'))) : '';        $usertype = $request->getParam('type') ? (int) $request->getParam('type') : 1;        if (!$this->checkemail($username)) {            IS_AJAX && ajaxReturns(0, '邮箱格式错误，请刷新重试！', 0);        }        $fu = $this->load("foreuser");        $where['email'] = $username;        $info = $fu->getUserInfo($where, "uid,identity,phone");        if ($info) {            $value_key = substr(sha1(uniqid(mt_rand(), true)), 0, 50);            $path = $this->url('registerverification', array('email' => $username, 'value_key' => $value_key), 'foreuser');            $strti = array(                'email' => $username,                'valuekey' => $value_key,                'times' => time(),                'oldemail' => $info['identity'],                'istype' => 2 //判断是否是更改邮箱            );            $fu->addvaluekey($strti);            $referer = $_SERVER['HTTP_REFERER'];            if (strpos($referer, "pin.ujiuye.com")) {                $path = 'http://pin.ujiuye.com/foreuser/registerverification/email/' . $username . '/value_key/' . $value_key;                $issend = $this->sendemail_ujiuye($usertype, 2, $username, $path);            } else {                $issend = $this->sendemail($usertype, 2, $username, $path);            }            if ($issend)                IS_AJAX && ajaxReturns(1, '邮件发送成功', 0);            else                IS_AJAX && ajaxReturns(0, '邮件发送失败', 0);        } else {            IS_AJAX && ajaxReturns(0, '账号信息不存在，请重新注册！', 0);        }    }    //登陆页面    function actionlogin() {        if (!empty($_SESSION['uc_offcn_uid'])) {            $this->redirect($this->url('index', '', 'user'));        }        $this->basevar['title'] = "用户登录-快就业";        //$login_url = $this->url('index', '', 'home');        $login_url = $_SERVER["HTTP_REFERER"];        if (strstr($login_url, 'foreuser/dophonepass')) {            $login_url = '';        }        $this->render('login', array("login_url" => $login_url));    }    //登陆页面 弹窗    function actiondlogin() {        $response = $this->renderPartial('dlogin');        IS_AJAX && ajaxReturns(1, 0, $response);    }    //弹窗登陆操作    function actiondodlogin() {        $request = new grequest();        $email = $request->getParam('username') ? htmlspecialchars(trim($request->getParam('username'))) : '';        $password = $request->getParam('password') ? htmlspecialchars(trim($request->getParam('password'))) : '';        $where = array();        if ($this->checkphone($email)) {            $where['phone'] = $email;            $slef_phone = $this->actionisphone($where['phone']);            if ($slef_phone['recode'] != 1) {                IS_AJAX && ajaxReturns(0, $slef_phone['mag'], 0);            }        } elseif ($this->checkemail($email)) {            $where['email'] = $email;            $slef_email = $this->actionisemail($where['email']);            if ($slef_email['recode'] != 1) {                IS_AJAX && ajaxReturns(0, $slef_email['mag'], 0);            }        }        $fu = $this->load("foreuser");        $a1 = $fu->getUserInfo1($where, '*');        if (!$a1['uid']) {            IS_AJAX && ajaxReturns(0, '账号或密码错误', 0);        }        $where['password'] = md5(md5($password) . $a1['salt']);        $a = $fu->getUserInfo($where, '*');        if ($where['email'] && !$a['phone'] && $a['is_verify'] == 0) {            //未验证邮箱            IS_AJAX && ajaxReturns(0, '账号未验证，<a style="color:#3297da;" href="' . $this->url('yzemail', array('email' => $where['email']), 'foreuser') . '">请前往邮箱验证</a>', 0);        }        if ($a['uid']) {            $company = $this->load('company');            $service = $company->getusertocompany($a['uid']);            //判断企业用户    修改公司用户最后登录时间            if ($service && $service['company_id']) {                $companyinfo = $company->getcompanyinfo($service['company_id']);                if ($companyinfo['c_add_userid'] == $a['uid']) {                    $company->editcompany($service['company_id'], array('c_edit_time' => time()));                }            }            $company_id = $service['company_id'] ? $service['company_id'] : 0;            $this->setsession('uc_offcn_uid', $a['uid']);            $name = $a['nickname'] ? $a['nickname'] : ($a['phone'] ? substr_replace($a['phone'], "*****", 3, 5) : substr_replace($a['email'], "*****", 3, 5));            $this->setsession('uc_offcn_username', $name);            $this->setsession('uc_offcn_realname', $a['realname']);            $this->setsession('uc_offcn_phone', $a['phone']);            $this->setsession('uc_company_id', $company_id);            $this->setsession('uc_usertype', $a['identity']);            $this->setcookie('uc_offcn_uid', $a['uid'], 3600 * 24);            $this->setcookie('uc_offcn_username', $name, 3600 * 24);            $this->setcookie('uc_offcn_phone', $a['phone'], 3600 * 24);            $this->setcookie('uc_company_id', $company_id, 3600 * 24);            $this->setcookie('uc_usertype', $a['identity'], 3600 * 24);            $userinfo['lastloginip'] = get_client_ip();            $userinfo['lastlogintime'] = time();            $fu->edit($userinfo, $a['uid']);            IS_AJAX && ajaxReturns(1, '登陆成功', 0);        } else {            IS_AJAX && ajaxReturns(0, '账号或密码错误', 0);        }    }    //登陆操作    function actiondologin() {        $request = new grequest();        $email = $request->getParam('username') ? htmlspecialchars(trim($request->getParam('username'))) : '';        $password = $request->getParam('password') ? htmlspecialchars(trim($request->getParam('password'))) : '';        $secode = $request->getParam('secode') ? trim($request->getParam('secode')) : '';        $key = $request->getParam('key') ? htmlspecialchars(trim($request->getParam('key'))) : '';        $login_url = $request->getParam('login_url') ? trim($request->getParam('login_url')) : '';        //验证码验证操作        if (!$secode) {            echo json_encode(array('info' => '验证不能为空', 'status' => 'n'));            exit();        }        if ((int) $secode !== (int) $this->sessioncode('seccode')) {            echo json_encode(array('info' => '验证码错误或者过期', 'data' => json_encode($_SESSION)));            exit();        }        $where = array();        if ($this->checkphone($email)) {            $where['phone'] = $email;            $slef_phone = $this->actionisphone($where['phone']);            if ($slef_phone['recode'] != 1) {                echo json_encode(array('info' => $slef_phone['mag'], 'status' => 'n'));                exit();            }        } elseif ($this->checkemail($email)) {            $where['email'] = $email;            $slef_email = $this->actionisemail($where['email']);            if ($slef_email['recode'] != 1) {                echo json_encode(array('info' => $slef_email['mag'], 'status' => 'n'));                exit();            }        }        $fu = $this->load("foreuser");        $a1 = $fu->getUserInfo1($where, '*');        if (!$a1['uid']) {            echo json_encode(array('info' => '账号或密码错误', 'status' => 'n'));            die;        }        $where['password'] = md5(md5($password) . $a1['salt']);        $a = $fu->getUserInfo($where, '*');        if ($a['uid']) {            if ($a['identity'] == 2) {                $login_url = $this->url('index', '', 'jobs');            }            if (!empty($where['email']) && $a['phone_validate'] == 0 && $a['is_verify'] == 0) {                //未验证邮箱                echo json_encode(array('info' => '账号未验证，<a style="color:#3297da;" href="' . $this->url('yzemail', array('email' => $where['email']), 'foreuser') . '">请前往邮箱验证</a>', 'status' => 'n', 'login_url' => $this->url('yzemail', array('email' => $where['email']), 'foreuser')));                die;            }            $company = $this->load('company');            $service = $company->getusertocompany($a['uid']);            //判断企业用户    修改公司用户最后登录时间            if ($service && $service['company_id']) {                $companyinfo = $company->getcompanyinfo($service['company_id']);                if ($companyinfo['c_add_userid'] == $a['uid']) {                    $company->editcompany($service['company_id'], array('c_edit_time' => time()));                }            }            $company_id = $service['company_id'] ? $service['company_id'] : 0;            $this->setsession('uc_offcn_uid', $a['uid']);            if ($a['nickname']) {                $name = $a['nickname'];            } else {                if (!empty($a['phone']) && $a['phone_validate'] != 0) {                    $name = substr_replace($a['phone'], "*****", 3, 5);                } else {                    $strlen = strpos($a['email'], '@');                    $name = substr_replace($a['email'], "*****", 3, $strlen - 3);                }            }            $this->setsession('uc_offcn_username', $name);            $this->setsession('uc_offcn_realname', $a['realname']);            $this->setsession('uc_offcn_phone', $a['phone']);            $this->setsession('uc_company_id', $company_id);            $this->setsession('uc_usertype', $a['identity']);            $this->setcookie('uc_offcn_uid', $a['uid'], 3600 * 24);            $this->setcookie('uc_offcn_username', $name, 3600 * 24);            $this->setcookie('uc_offcn_phone', $a['phone'], 3600 * 24);            $this->setcookie('uc_company_id', $company_id, 3600 * 24);            $this->setcookie('uc_usertype', $a['identity'], 3600 * 24);            $data = array("uid" => $a['uid'], 'nickname' => $a['nickname'], 'phone' => $a['phone']);            $userinfo['lastloginip'] = get_client_ip();            $userinfo['lastlogintime'] = time();            $fu->edit($userinfo, $a['uid']);            $data_str = str_replace('+', '%2B', uc_authcode(json_encode($data), "ENCODE"));            if ($a['identity'] == 2 && !$company_id) {                //判断用户是否提交营业执照申请，如已提交但未审核则跳转至提示页面                $where1 = array('uid'=>$this->_uid);                $certinfo = $company->getcertbyarr($where1,"verify");                if (empty($certinfo)) {                    $login_url = $login_url = $this->url('writeusertocompany', '', 'userforcompany');                } else {                    if ($certinfo['verify'] != 2) {                        $login_url = $login_url = $this->url('index', array('showapply' => 0), 'certificate');                    }                }            }            if (strpos($login_url, 'setemail')) {                $login_url = $this->url('index', '', 'user');            }            echo json_encode(array('info' => '登陆成功', 'status' => 'y', 'login_url' => $login_url, 'data' => $data_str));        } else {            echo json_encode(array('info' => '账号或密码错误', 'status' => 'n'));            die;        }    }    //退出    function actionoutlogin() {        session_destroy();        $this->setcookie('uc_offcn_uid', '');        $this->setcookie('uc_offcn_username', '');        $this->setcookie('uc_offcn_phone', '');        $this->setcookie('uc_company_id', '');        $this->redirect($this->url('index', '', 'home'));    }    //忘记密码    function actionforget() {        if ($this->session('uc_offcn_uid')) {            $this->redirect($this->url('index', '', 'user'));        }        $this->basevar['title'] = "找回密码-快就业";        $this->render('forget');    }    /* 验证手机号和手机验证码是否一致 */    function actiondophonepass() {        $request = new grequest();        $phone = $request->getParam('phone') ? htmlspecialchars(trim($request->getParam('phone'))) : '';        $verify = $request->getParam('verify') ? htmlspecialchars(trim($request->getParam('verify'))) : '';        if (!$phone) {            ShowMsg("手机号不能为空", "-1");            exit();        }        if ($this->sessionphone('yzphone') != $phone) {            ShowMsg("手机号和获取验证的手机不一致！", "-1");            exit();        }        if ($this->sessionphone('captcha') != base64_encode($verify)) {            ShowMsg("手机验证码错误", "-1");            exit();        }        $this->delsessionphone('captcha'); //删除redis中验证码        $this->render('phonepass', array(            'username' => $phone        ));    }    //更改密码    function actionphpassword() {        $request = new grequest();        $this->basevar['title'] = "找回密码-快就业";        $username = $request->getParam('username') ? htmlspecialchars(trim($request->getParam('username'))) : '';        $password = htmlspecialchars(trim($request->getParam('password')));        $repassword = htmlspecialchars(trim($request->getParam('repassword')));        $fu = $this->load("foreuser");        if (!empty($_POST)) {            if (!$password) {                echo json_encode(array('error' => '新密码不能为空', 'recode' => 0));                exit();            }            if (!$repassword) {                echo json_encode(array('error' => '确认新密码不能为空', 'recode' => 0));                exit();            }            if ($repassword != $password) {                echo json_encode(array('error' => '两次密码不一致', 'recode' => 0));                exit();            }            if ($this->checkphone($username)) {                $where['phone'] = $username;            } elseif ($this->checkemail($username)) {                $where['email'] = $username;            }            $uid = $fu->getUserInfo($where, '*');            if ($where['email']) {                if (!$uid['uid']) {                    echo json_encode(array('error' => '您的验证码已过期', 'recode' => 0));                    exit();                }            }            $salt = substr(uniqid(rand()), -6);            $paem = array(                'password' => md5(md5($password) . $salt),                'salt' => $salt,            );            $fu->edit($paem, $uid['uid']);            echo json_encode(array('success' => $this->url('login', '', 'foreuser'), 'recode' => 1));            exit();        }    }    //发送邮件    function actiondoforget() {        $request = new grequest();        $email = $request->getParam('email') ? htmlspecialchars(trim($request->getParam('email'))) : '';        $verify = $request->getParam('verify') ? intval($request->getParam('verify')) : '';        if (!$verify) {            echo json_encode(array('error' => '验证码不能为空', 'recode' => 0));            exit();        }        if ($verify !== (int) $this->sessioncode('seccode')) {            echo json_encode(array('error' => '验证码错误', 'recode' => 0));            exit();        }        if (!$this->checkemail($email)) {            echo json_encode(array('error' => '账号格式不正确', 'recode' => 0));            exit();        }        $fu = $this->load("foreuser");        $where['email'] = $email;        $fgs = $fu->getValueEmail($email);        if ($fgs['times'] && (time() - $fgs['times'] < 60)) {            echo json_encode(array('error' => '60秒后可重新发送...', 'recode' => 0));            exit();        }        $info = $fu->getUserInfo($where, '*');        if (!empty($info)) {            $value_key = substr(sha1(uniqid(mt_rand(), true)), 0, 50);            $path = $this->url('setemail', array('email' => $email, 'value_key' => $value_key), 'foreuser');            $strti = array(                'email' => $email,                'valuekey' => $value_key,                'times' => time(),            );            $fu->addvaluekey($strti);            $referer = $_SERVER['HTTP_REFERER'];            if (strpos($referer, "pin.ujiuye.com")) {                $path = 'http://pin.ujiuye.com/foreuser/setemail/email/' . $email . '/value_key/' . $value_key;                $this->sendemail_ujiuye($info['identity'], 0, $email, $path, '会员找回密码 【优聘】');            } else {                $this->sendemail($info['identity'], 0, $email, $path, '会员找回密码 【快就业】');            }            $emailst = explode('@', $email);            $url = "http://mail." . $emailst[1];            echo json_encode(array('email' => $url, 'recode' => 1));            exit;        } else {            echo json_encode(array('error' => '账号不存在', 'recode' => 0));            exit();        }    }    //验证邮箱或者更改邮箱    function actionediteamil() {        $this->basevar['title'] = "找回密码-快就业";        $request = new grequest();        if ($_GET) {            $post['email'] = htmlspecialchars(trim($request->getParam('email')));            $post['value_key'] = htmlspecialchars(trim($request->getParam('value_key')));            $foreuser = $this->load('foreuser');            $info = $foreuser->getValue($post);            if (!$info) {                ShowMsg("抱歉，您的验证链接失效！<br>请重新验证", $this->url('index', '', 'user'));                die;            } else if (time() - $info['times'] > 86400) {                $foreuser->delValue($info['uid']);                ShowMsg("抱歉，您的验证链接失效！<br>请重新验证", $this->url('index', '', 'user'));                die;            }            $site = '';            $site['is_verify'] = 1;            if ($info['istype'] == 1) {                $msg = "邮箱已绑定！";                $where['uid'] = $info['oldemail'];                $site['email'] = $post['email'];            } else if ($info['istype'] == 2) {                $msg = "邮箱已验证！";                $where['email'] = $post['email'];            } else if ($info['istype'] == 3) {                $msg = "邮箱已更改！";                $site['email'] = $post['email'];                $where['email'] = $info['oldemail'];            }            $user = $foreuser->getUserInfo($where, '*');            $foreuser->edit($site, $user['uid']);            if (REIS_YQK && $info['istype'] == 3) {                $site['ucuid'] = $user['uc_uid'];                curlst($site, 'editemail');            }            $foreuser->delValue($info['id']);            $act = array(1 => '绑定', 2 => '验证', 3 => '更换');            $this->render('emailverific', array(                'act' => $act,                'istype' => $info['istype']            ));        } else {            ShowMsg("抱歉，您的验证链接失效！<br>请重新验证", $this->url('index', '', 'user'));            die;        }    }    //验证邮件    function actionsetemail() {        $request = new grequest();        if ($request->getParam('value_key')) {            $fu = $this->load("foreuser");            $site = array(                'email' => htmlspecialchars(trim($request->getParam('email'))),                'value_key' => htmlspecialchars(trim($request->getParam('value_key')))            );            $value = $fu->getValue($site);            $time = time();            if (empty($value)) {                ShowMsg("验证邮件已过期!", $this->url('login', '', 'foreuser'));                exit();            }            if ($time - $value['times'] > 86400) {                ShowMsg("验证邮件已过期!", $this->url('login', '', 'foreuser'));                exit();            }            $fu->delValue($value['uid']);            $this->render('phonepass', array(                'username' => $value['email']            ));        }    }    //验证是否存在    function actionexistence() {        $request = new grequest();        $param = $request->getParam('param') ? htmlspecialchars(trim($request->getParam('param'))) : '';        $exis = $request->getParam('exis') ? htmlspecialchars(trim($request->getParam('exis'))) : 1;        if ($this->checkemail($param)) {            $slef = $this->actionisemail($param);        } else {            $slef = $this->actionisphone($param);        }        if ($slef['recode'] != $exis) {            $result['status'] = 'n';            $result['info'] = $slef['mag'];        } else {            $result['status'] = 'y';            $result['info'] = '账号可以注册';        }        echo json_encode($result);    }    //验证邮箱    function actionisemail($email = '') {        $request = new grequest();        $return_type = $email ? 'return' : 'ajax';        $emails = $request->getParam('user') ? htmlspecialchars(trim($request->getParam('user'))) : $email;        if (!$this->checkemail($emails)) {            $result = array('recode' => 0, 'mag' => 'Email格式错误');        } else {            $fu = $this->load("foreuser");            $where['email'] = $emails;            $info = $fu->getUserInfo($where, "*");            if ($info) {                $result = array('recode' => 1, 'mag' => '账号已存在');            } else {                $result = array('recode' => 2, 'mag' => '账号不存在');//                if($userinfo['recode']==1){//                   $result = array('recode'=>1,'mag'=>'账号已存在');//                }else{//                    $result = array('recode'=>2,'mag'=>'账号不存在');//                }                                 }//            if (empty($info)) {//                $result = array('recode' => 2, 'mag' => '账号不存在');//            } else {//                if ($info["is_verify"] != 0) {//                    $result = array('recode' => 1, 'mag' => '账号已存在');//                } else {//                    $result = array('recode' => 0, 'mag' => '账号已存在,但未验证,不能再进行登陆/注册');//                }//            }        }        if ($return_type == 'ajax') {            echo json_encode($result);        } else {            return $result;        }    }    //验证手机号    function actionisphone($phone = '') {        $request = new grequest();        $return_type = $phone ? 'return' : 'ajax';        $phones = $request->getParam('user') ? htmlspecialchars(trim($request->getParam('user'))) : $phone;        //验证手机格式        if (!$this->checkphone($phones)) {            $result = array('recode' => 0, 'mag' => '账号格式错误');        } else {            //判断本地是否存在            $fu = $this->load("foreuser");            $where['phone'] = $phones;            $info = $fu->getUserInfo($where, '*');            if (!empty($info)) {                $result = array('recode' => 1, 'mag' => '账号已存在');            } else {                $result = array('recode' => 2, 'mag' => '账号不存在');            }        }        if ($return_type == 'ajax') {            echo json_encode($result);        } else {            return $result;        }    }    //验证验证码    function actionisverify() {        $request = new grequest();        $result = array();        $verifys = $request->getParam('param') ? (int) htmlspecialchars(trim($request->getParam('param'))) : '';        $username = $request->getParam('username') ? (int) htmlspecialchars(trim($request->getParam('username'))) : '0';        if (!$username) {            $result = array('status' => 'n', 'info' => '验证码错误');        } else if ($username == 1) {            if ($this->sessionphone('captcha') != base64_encode($verifys)) {                $logFile = ROOT_PATH . '../log/error' . date('Y-m-d') . '.txt';                $msg = date('Y-m-d H:i:s') . ' >>> ---' . "验证码错误，用户输入:" . $verifys . ",系统记录：键名=>" . "sphone_captcha_" . session_id() . "键值=>" . base64_decode($this->sessionphone('captcha')) . "\r\n";                file_put_contents($logFile, $msg, FILE_APPEND);                $result = array('status' => 'n', 'info' => '验证码错误');            } else {                $result = array('status' => 'y');            }        } else if ($username == 2) {            if ($verifys != (int) $this->getauthcode()) {                $result = array('status' => 'n', 'info' => '验证码错误');            } else {                $result = array('status' => 'y');            }        }        echo json_encode($result);        die;    }    //发送手机验证码    function actionsetphone() {        $request = new grequest();        $phones = $request->getParam('user') ? htmlspecialchars(trim($request->getParam('user'))) : '';        //验证手机格式        if (!$this->checkphone($phones)) {            echo json_encode(array('recode' => 0, 'mag' => '账号格式错误'));            exit;        }        //判断本地是否存在        $fu = $this->load("foreuser");        $where['phone'] = $phones;        $where['phone_validate'] = 1;        $info = $fu->getUserInfo($where);        if ($info['total'] == 1) {            echo json_encode(array('recode' => 1, 'mag' => '账号已存在'));            exit;        }        $times = time();        $row = $fu->setRow($where['phone']);        $total = $fu->settotal($where['phone']);        if ($row) {            if ($row['several'] == 3) {                echo json_encode(array('recode' => 0, 'mag' => '每天最多发送3条'));                die;            }            if ($times - $row['times'] < 30) {                echo json_encode(array('recode' => 0, 'mag' => '两次发送时间间隔不能小于30秒'));                die;            }        }        $seit = array(            'phone' => $where['phone'],            'times' => $times,            'several' => $total + 1        );        $uid = $fu->setinsert($seit);        if ($uid) {            $result = $this->setcode($where['phone']);            $this->setsessionphone("yzphone", $phones);            echo json_encode(array('recode' => 2, 'mag' => $result));            die;        } else {            echo json_encode(array('recode' => 0, 'mag' => '短信发送失败'));            die;        }    }    //找回密码中的发送手机验证码，只有这个单独列出来    function actionzhmmphone() {        $request = new grequest();        $phones = $request->getParam('user') ? htmlspecialchars(trim($request->getParam('user'))) : '';        //验证手机格式        if (!$this->checkphone($phones)) {            echo json_encode(array('recode' => 0, 'mag' => '账号格式错误'));            exit;        }        //判断本地是否存在        $fu = $this->load("foreuser");        $where['phone'] = $phones;        $info = $fu->getUserInfo($where, '*');        if (empty($info)) {            echo json_encode(array('recode' => 2, 'mag' => '账号不存在'));            exit;        }//        else {//            if ($info["phone_validate"] != 0) {//                $result = array('recode' => 1, 'mag' => '账号已存在');//            } else {//                $result = array('recode' => 0, 'mag' => '账号已存在,但未验证,不能再进行登陆/注册');//            }//        }        $times = time();        $row = $fu->setRow($where['phone']);        $total = $fu->settotal($where['phone']);        if ($row) {            if ($row['several'] > 5) {                echo json_encode(array('recode' => 0, 'mag' => '每天最多发送5条'));                die;            }            if ($times - $row['times'] < 30) {                echo json_encode(array('recode' => 0, 'mag' => '两次发送时间间隔不能小于30秒'));                die;            }        }        $seit = array(            'phone' => $where['phone'],            'times' => $times,            'several' => $total + 1        );        $uid = $fu->setinsert($seit);        if ($uid) {            $result = $this->setcode($where['phone']);            $this->setsessionphone("yzphone", $phones);            echo json_encode(array('recode' => 1, 'mag' => $result));            die;        } else {            echo json_encode(array('recode' => 0, 'mag' => '短信发送失败'));            die;        }    }    /**     * 发送手机验证码     * @param type $mobile     * @return type     */    function setcode($mobile) {//        $chars = '12345678903216549870';//        $count = strlen($chars);//        for ($i = 0; $i < $count; $i++) {//            $arr[$i] = $chars[$i];//        }//        mt_srand((double) microtime() * 1000000); //生成随机串//        shuffle($arr);//        $code = substr(implode('', $arr), 5, 6);        $code = mt_rand(100000, 999999);        $this->setsessionphone('captcha', base64_encode($code));        $kefutel = strpos($_SERVER['HTTP_REFERER'], "pin.ujiuye.com") ? '400-650-0909' : $this->getcontact('tel');        $content = '验证码为' . $code . '，请在页面中输入以完成验证，有问题请致电' . $kefutel;        require UC_ROOT . './release/Sms.class.php';        $sms = new sms_send();        $sms->send($mobile, $content);        return $code;    }    /**     * 生成登陆验证码     */    public function actionseccode() {        $seccode = $this->authcode();        @header("Expires: -1");        @header("Cache-Control: no-store, private, post-check=0, pre-check=0, max-age=0", FALSE);        @header("Pragma: no-cache");        include_once UC_ROOT . 'lib/seccode.class.php';        $code = new seccode();        $code->display($seccode);    }    /**     * 第三方登录/注册绑定     */    function actionthirdparty() {        if ($_REQUEST['rqr'] == 1) { //qq登陆            $key = $_SESSION['qqkey'];            $openid = $_SESSION['qqopenid'];            $nickname = $_SESSION['qqname'];        } else if ($_REQUEST['rqr'] == 2) {            $key = $_SESSION['wbkey'];            $openid = $_SESSION['wbopenid'];            $nickname = $_SESSION['wbname'];        } else if ($_REQUEST['rqr'] == 3) {            $key = $_SESSION['wxkey'];            $openid = $_SESSION['wxopenid'];            $nickname = $_SESSION['wxname'];        }        $login_url = $this->url('index', '', 'home');        $id = "";        $fu = $this->load("foreuser");        $isemail = false;        if (!empty($key) && !empty($openid)) {            if ($_REQUEST['rqr'] == 3) {                $user = $fu->getCustmerthird3($key);            } else {                $user = $fu->getCustmerthird($_REQUEST['rqr'], $openid);            }            if (!$user['id']) {                if ($_POST) {                    $where = array();                    $request = new grequest();                    if ($_POST['dltter'] == '登录绑定') {                        $username = $request->getParam('username_dl') ? htmlspecialchars(trim($request->getParam('username_dl'))) : '';                        $password = $request->getParam('password_dl') ? htmlspecialchars(trim($request->getParam('password_dl'))) : '';                        $secode = $request->getParam('secode_dl') ? intval($request->getParam('secode_dl')) : '';                        if (!$secode) {                            ShowMsg('验证不能为空', "-1");                            exit();                        }//                        if ($secode !== (int) $this->sessioncode('seccode')) {//                            ShowMsg('验证码错误或者过期', "-1");//                            exit();//                        }                        if ($this->checkphone($username)) {                            $where['phone'] = $username;                            $slef_phone = $this->actionisphone($where['phone']);                            if ($slef_phone['recode'] != 1) {                                ShowMsg($slef_phone['mag'], "-1");                                exit();                            }                        } else {                            if ($this->checkemail($username)) {                                $isemail = true;                                $where['email'] = $username;                                $slef_email = $this->actionisemail($where['email']);                                if ($slef_email['recode'] != 1) {                                    ShowMsg($slef_email['mag'], "-1");                                    exit();                                }                            } else {                                ShowMsg('账号格式错误', "-1");                                exit();                            }                        }                        $a1 = $fu->getUserInfo1($where, '*');                        if (!$a1['uid']) {                            ShowMsg('账号或密码错误', "-1");                            exit();                        }                        $passwords = md5(md5($password) . $a1['salt']);                        if ($passwords != $a1['password']) {                            ShowMsg('账号或密码错误', "-1");                            exit();                        }                        $last = $a1['uid'];                    } else if ($_POST['zctter'] == '注册绑定') {                        $username = $request->getParam('username_zc') ? htmlspecialchars(trim($request->getParam('username_zc'))) : '';                        $password = $request->getParam('password_zc') ? htmlspecialchars(trim($request->getParam('password_zc'))) : '';                        //$repassword = $request->getParam('repassword_zc') ? htmlspecialchars(trim($request->getParam('repassword_zc'))) : '';                        $verify = $request->getParam('verify_zc') ? htmlspecialchars(trim($request->getParam('verify_zc'))) : '';                        $usertype = $request->getParam('type') ? (int) $request->getParam('type') : 1;                        if ($usertype == 2) {                            $login_url = $this->url('writeusertocompany', '', 'userforcompany');                        }//                        if ($verify != (int) $this->getauthcode()) {//                            ShowMsg("验证码错误或者过期", "-1");//                            exit();//                        }                        $seg = $reg = array();                        if ($this->checkphone($username)) {                            $reg['phone'] = $username;                            $slef_phone = $this->actionisphone($reg['phone']);                            if ($slef_phone['recode'] != 2) {                                ShowMsg($slef_phone['mag'], "-1");                                exit();                            }                        } else {                            if ($this->checkemail($username)) {                                $isemail = true;                                $where['email'] = $username;                                $reg['email'] = $username;                                $slef_email = $this->actionisemail($where['email']);                                if ($slef_email['recode'] != 2) {                                    ShowMsg($slef_email['mag'], "-1");                                    exit();                                }                            } else {                                ShowMsg('账号格式错误', "-1");                                exit();                            }                        }//                        if ($repassword != $password) {//                            ShowMsg("密码和确认密码不一致", "-1");//                            exit();//                        }                        $reg['salt'] = $salt = substr(uniqid(rand()), -6);                        $reg['password'] = md5(md5($password) . $salt);                        $reg['regdate'] = time();                        $reg['regip'] = get_client_ip();                        $reg['identity'] = $usertype;                        $last = $fu->insert($reg);                    }                    if ($last) {                        $seg['uid'] = $last;                        $seg['nickname'] = $nickname;                        $seg['key'] = $key;                        $seg['openid'] = $openid;                        $seg['type'] = $_REQUEST['rqr'];                        $seg['times'] = time();                        $id = $fu->insertthird($seg);                    }                    $uid = $last;                    $phone = $username ? $username : $a1['phone'];                    if ($_POST['zctter'] == '注册绑定' && !empty($reg['email'])) {                        $value_key = substr(sha1(uniqid(mt_rand(), true)), 0, 50);                        $path = $this->url('registerverification', array('email' => $reg['email'], 'value_key' => $value_key), 'foreuser');                        $strti = array(                            'email' => $reg['email'],                            'valuekey' => $value_key,                            'times' => time(),                            'oldemail' => $usertype,                            'istype' => 1//验证邮箱                        );                        $model = $this->load("foreuser");                        $model->addvaluekey($strti);                        //邮箱注册绑定时发送邮件                        $referer = $_SERVER['HTTP_REFERER'];                        if (strpos($referer, "pin.ujiuye.com")) {                            $path = 'http://pin.ujiuye.com/foreuser/setemail/email/' . $reg['email'] . '/value_key/' . $value_key;                            $this->sendemail_ujiuye($usertype, 1, $reg['email'], $path);                        } else {                            $issend = $this->sendemail($usertype, 1, $reg['email'], $path);                        }                        if ($issend)                            $this->redirect($this->url('yzemail', array('email' => $reg['email'], 'type' => $usertype), 'foreuser'));                        else                            IS_AJAX && ajaxReturns(0, '邮件发送失败', 0);                        exit();                    }                } else {                    if ($this->session('uc_offcn_uid') || $_COOKIE['uc_offcn_uid']) {                        $this->redirect($this->url('index', '', 'user'));                    }                    $this->basevar['title'] = "用户绑定-快就业";                    $this->render('register1', array('login_url' => $login_url, 'rqr' => $_REQUEST['rqr'], 'nickname' => $nickname));                    die;                }            } else {                $id = $user['id'];                $uid = $user['uid'];                $where = array("uid" => $uid);                $userinfo = $fu->getUserInfo($where, "*");                $phone = $userinfo['phone'];                if ($nickname != $user['nickname']) {                    $fu->editut(array('nickname' => $nickname), $user['id']);                }                if ($user['key'] != $key) {                    $fu->editut(array('key' => $key), $user['id']);                }            }            if ($id) {                //如果是邮箱 判断邮箱是否已验证                if ($isemail) {                    $where = array();                    $where['email'] = $username;                    $userinfo = $fu->getUserInfo($where, '*');                    if ($userinfo['is_verify'] == 0) {                        //未验证邮箱                        echo json_encode(array('info' => '账号未验证，<a style="color:#3297da;" href="' . $this->url('yzemail', array('email' => $where['email']), 'foreuser') . '">请前往邮箱验证</a>', 'status' => 'n', 'login_url' => $this->url('yzemail', array('email' => $where['email']), 'foreuser')));                        die;                    }                }                //登陆操作                $company = $this->load('company');                $service = $company->getusertocompany($uid);                $company_id = $service['company_id'] ? $service['company_id'] : 0;                $this->setsession('uc_offcn_uid', $uid);                $this->setsession('uc_offcn_username', $nickname);                $this->setsession('uc_offcn_phone', $phone);                $this->setsession('rqr', $_REQUEST['rqr']);                $this->setsession('uc_company_id', $company_id);                $this->setsession('uc_usertype', $userinfo['identity']);                $this->setcookie('uc_offcn_uid', $uid, 3600 * 24);                $this->setcookie('uc_offcn_username', $nickname, 3600 * 24);                $this->setcookie('uc_offcn_phone', $phone, 3600 * 24);                $this->setcookie('rqr', $_REQUEST['rqr'], 3600 * 24);                $this->setcookie('uc_company_id', $company_id, 3600 * 24);                $data = array("uid" => $uid, 'nickname' => $nickname, 'phone' => $phone, 'is_img' => 0);                $data_str = str_replace('+', '%2B', uc_authcode(json_encode($data), "ENCODE"));                if ($_REQUEST['rqr'] == 1) {                    unset($_SESSION['qqkey']);                    unset($_SESSION['qqopenid']);                    unset($_SESSION['qqname']);                    unset($_SESSION['qqsex']);                } elseif ($_REQUEST['rqr'] == 2) {                    unset($_SESSION['wbkey']);                    unset($_SESSION['wbopenid']);                    unset($_SESSION['wbname']);                    unset($_SESSION['wbsex']);                } elseif ($_REQUEST['rqr'] == 3) {                    unset($_SESSION['wxkey']);                    unset($_SESSION['wxopenid']);                    unset($_SESSION['wxname']);                    unset($_SESSION['wxsex']);                }                $this->render('reg', array('data_str' => $data_str, 'login_url' => $login_url));                die;            }        } else {            ShowMsg('登录已过期', "-1");            exit();        }    }    //用户协议    function actionprotocol() {        $this->render('protocol');    }}?>