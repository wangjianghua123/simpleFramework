<?phpsession_start();!defined('IN_UC') && exit('Access Denied');class base {    var $time;    var $onlineip;    var $db;    var $view;    var $user = array();    var $settings = array();    var $cache = array();    var $app = array();    var $lang = array();    var $input = array();    var $defaulttpldir;    var $staticInfo;    var $basevar;    var $myavatar;    var $_id;    var $Sessid;    var $userinfo = array();    var $adverts_t = '';    var $adverts_j = '';    var $adverts_f = '';    var $adverts_r = '';    var $adverts_rend = '';    var $adverts_search_r = '';    var $adverts_fd = '';        function __construct() {        $this->defaulttpldir = UC_ROOT . './view/default';        $this->base();    }    /* session信息 */    function session($id) {        if (!$id)            return null;        return $_SESSION[$id];    }    /* 设置session信息 */    function setsession($id, $val) {        $_SESSION[$id] = $val;    }    /* 验证码信息 */    function sessioncode($id) {        if (!$id)            return null;        $r = $this->init_caches();        $r->select(1);        return $r->get('scode_' . $id . '_' . session_id());    }    /* 设置验证码信息 */    function setsessioncode($id, $val) {        $r = $this->init_caches();        $r->select(1);        return $r->setex('scode_' . $id . '_' . session_id(), 3600, $val);    }        /**     * 一键刷新职位信息     * @param type $id     * @return null     */    function sessionrefreshalljob($id) {        if (!$id)            return null;        $r = $this->init_caches();        $r->select(1);        return $r->get('refresh_' . $id);    }    /**     * 设置一键刷新职位信息     * @param type $id     * @param type $val     * @return type     */    function setsessionrefreshalljob($id, $val) {        $r = $this->init_caches();        $r->select(1);        return $r->setex('refresh_' . $id, 3600 * 24, $val);    }    /* 手机号验证码信息 */    function sessionphone($id) {        if (!$id)            return null;        $r = $this->init_caches();        $r->select(1);        return $r->get('sphone_' . $id . '_' . session_id());    }    /* 设置手机号验证码信息 */    function setsessionphone($id, $val) {        $r = $this->init_caches();        $r->select(1);        return $r->setex('sphone_' . $id . '_' . session_id(), 600, $val);    }    /* 删除手机号验证码信息 */    function delsessionphone($id) {        $r = $this->init_caches();        $r->select(1);        return $r->del('sphone_' . $id . '_' . session_id());    }    function init($id) {        $this->_id = $id;        //读取头部                         $this->basevar['title'] = "555";        $this->myavatar = $this->session('userhead');        if (file_exists(ROOT_PATH . $this->myavatar)) {            $this->basevar['avatar'] = $this->myavatar;        } else {            $this->basevar['avatar'] = '';        }    }    function getid() {        return $this->_id;    }    function init_var() {        $this->time = time();        $cip = getenv('HTTP_CLIENT_IP');        $xip = getenv('HTTP_X_FORWARDED_FOR');        $rip = getenv('REMOTE_ADDR');        $srip = $_SERVER['REMOTE_ADDR'];        if ($cip && strcasecmp($cip, 'unknown')) {           $this->onlineip = $cip;        } elseif ($xip && strcasecmp($xip, 'unknown')) {            $this->onlineip = $xip;        } elseif ($rip && strcasecmp($rip, 'unknown')) {            $this->onlineip = $rip;        } elseif ($srip && strcasecmp($srip, 'unknown')) {            $this->onlineip = $srip;        }        preg_match("/[\d\.]{7,15}/", $this->onlineip, $match);        $this->onlineip = $match[0] ? $match[0] : 'unknown';        define('FORMHASH', $this->formhash());        $_GET['page'] = max(1, intval(getgpc('page')));        $this->lang = &$lang;    }    /* 初始化redis服务 php原生*/    function init_caches() {        static $caches;        if (!$caches) {            $caches = getRedis();        }        return $caches;    }      /* 初始化redis服务 走类库*/    function init_rediscaches() {        static $rediscaches;        if (!$rediscaches) {            require_once UC_ROOT.'command/cache/driver/RedisX.class.php';            $options['expire'] = -1;            $rediscaches = Cache::getInstance('RedisX',$options);        }        return $rediscaches;    }    function init_input($getagent = '') {        $input = getgpc('input', 'R');        if ($input) {            $input = $this->authcode($input, 'DECODE', $this->app['authkey']);            parse_str($input, $this->input);            $this->input = daddslashes($this->input, 1, TRUE);            $agent = $getagent ? $getagent : $this->input['agent'];            if (($getagent && $getagent != $this->input['agent']) || (!$getagent && md5($_SERVER['HTTP_USER_AGENT']) != $agent)) {                exit('Access denied for agent changed');            } elseif ($this->time - $this->input('time') > 3600) {                exit('Authorization has expired');            }        }        if (empty($this->input)) {            exit('Invalid input');        }    }    function init_app() {        $appid = intval(getgpc('appid'));        $appid && $this->app = $this->cache['apps'][$appid];    }    function init_user() {        if (isset($_COOKIE['uc_auth'])) {            @list($uid, $username, $agent) = explode('|', $this->authcode($_COOKIE['uc_auth'], 'DECODE', ($this->input ? $this->app['appauthkey'] : UC_KEY)));            if ($agent != md5($_SERVER['HTTP_USER_AGENT'])) {                $this->setcookie('uc_auth', '');            } else {                @$this->user['uid'] = $uid;                @$this->user['username'] = $username;            }        }    }    function init_template() {        $charset = UC_CHARSET;        require_once UC_ROOT . 'lib/template.class.php';        $this->view = new template();        $this->view->assign('dbhistories', init_db()->histories);        $this->view->assign('charset', $charset);        $this->view->assign('dbquerynum', init_db()->querynum);        $this->view->assign('user', $this->user);    }    function init_note() {        if ($this->note_exists() && !getgpc('inajax')) {            $this->load('note');            $_ENV['note']->send();        }    }    function init_mail() {        if ($this->mail_exists() && !getgpc('inajax')) {            $this->load('mail');            $_ENV['mail']->send();        }    }    /* 设置验证码 */    function authcode() {        $a = '1234567890';        for ($i = 0; $i < 5; $i++) {            $l.=substr($a, rand(0, 9), 1);        }        $this->setsessioncode('seccode', $l);        return $l;    }    /* 获取验证码 */    function getauthcode() {        return $this->sessioncode('seccode');    }    /**     *      * @global type $globe_exam     * @param type $action action     * @param type $var 数组变量     * @param type $con controllname     * @param type $p //?=dddd,可通过p来追加字符串     * @return type     */    function url($action, $var = array(), $con = false, $p = '') {        global $globe_exam;        $gets = getgpc();        $type = $globe_exam[$gets['type']][0];        $stra = '';        if (is_array($var)) {            $action || $action = 'index';            foreach ($var as $k => $v) {                if (trim($v) && trim($k))                    $stra.='/' . $k . '/' . $v;            }        }else {            $action = $action ? $action : '';            if ($var) {                $stra .= '/' . $var;            }        }        if (!$con)            $con = $this->getid();        $gang = $action ? '/' : '';        return ROOT_URL . '/' . $con . $gang . $action . $stra . $p . '/';    }    /**     *      * @param type $url 如果为数组 array(control,action,var)     */    function redirect($url) {        if (is_array($url)) {            $url = '/' . $this->url($url[1] ? $url[1] : 'index', $url[2], $url[0]);        }        header('Location: ' . $url, true, 302);        exit();    }    function dstripslashes($string) {        if (is_array($string)) {            foreach ($string as $key => $val) {               $string[$key] = $this->dstripslashes($val);            }        } else {            $string = stripslashes($string);        }        return $string;    }    function render($fname, $var) {        extract($var, EXTR_SKIP);        include $this->defaulttpldir . '/' . $this->_id . '/' . $fname . '.php';    }    function render1($fname, $var) {        extract($var, EXTR_SKIP);        include UC_ROOT . $fname . '.html';    }    function render2($fname, $var) {        extract($var, EXTR_SKIP);        include $this->defaulttpldir . '/' . $fname . '.php';    }    function renderPartial($fname, $var) {        // 页面缓存        ob_start();        ob_implicit_flush(0);        extract($var, EXTR_SKIP);        include $this->defaulttpldir . '/' . $this->_id . '/' . $fname . '.php';        $content = ob_get_clean();        return $content;    }    //获得大写数字    function getNumeral($index) {        $numeral = array('', '一', '二', '三', '四', '五', '六', '七', '八', '九', '十');        $digit = array('', '十', '百', '千', '万');        $len = strlen($index);        for ($i = 0; $i < $len; $i++) {            $num = substr($index, $i, 1);            $string .= $numeral[$num] . $digit[$len - $i - 1];        }        return $string;    }    function setmeta($title, $keywords, $description) {        global $globe_exam;        $this->basevar['title'] = $title;        $this->basevar['keywords'] = $keywords;        $this->basevar['description'] = $description;    }    /**     * 验证手机号码     * @param type $phone     * @return boolean     */    function checkphone($phone) {        if (preg_match("/^1[0-9][0-9]{9}$/", $phone)) {            return true;        } else {            return false;        }    }    /**     * 验证邮箱地址     * @param type $email     * @return boolean     */    function checkemail($email) {        if (preg_match("/^([0-9A-Za-z\\-_\\.]+)@([0-9a-z\\-_\\.]+\\.[a-z]{2,3}(\\.[a-z]{2})?)$/i", $email)) {            return true;        }else {            return false;        }    }    /**     * 将邮件地址多余部分替换为*     * @param type $email     * @return type     */    function replaceemailtostar($email) {        $strlen = strpos($email, '@');        $newemail = substr_replace($email, "*****", 3, $strlen - 3); //只显示前三位，@符号之前的都替换成*        return $newemail;    }}?>